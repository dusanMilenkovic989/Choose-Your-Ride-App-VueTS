{
  "version": 3,
  "sources": ["netlify/functions/proxy.js"],
  "sourceRoot": "C:/Users/olgas/AppData/Local/Temp/tmp-11808-lvsZFA4GMPMB",
  "sourcesContent": ["const handler = async (event) => \r\n{\r\n    const { path: PATH, rawQuery: RAW_QUERY, httpMethod: HTTP_METHOD, headers: HEADERS, body: BODY } = event\r\n    const TARGET_PATH = PATH.replace('/.netlify/functions/proxy', '').replace('/api', '')\r\n    const TARGET_URL = `https://rateengine.ship.cars/v2/vehicles${TARGET_PATH}?${RAW_QUERY || ''}`\r\n    const ERROR = {\r\n        fetchMessages: {\r\n            fetchUnsuccessful: 'Unexpected fetch response',\r\n            fetchNotExecuted: 'Fetch could not be executed at this time',\r\n        },\r\n        data: 'No data',\r\n        emptyMessage: 'No message',\r\n        proxyStatus: 500\r\n    }\r\n    \r\n    try \r\n    {\r\n        const FETCH_OPTIONS = {\r\n            method: HTTP_METHOD,\r\n            headers: { ...HEADERS },\r\n            body: HTTP_METHOD !== 'GET' ? BODY : null\r\n        }\r\n        const RESPONSE = await fetch(TARGET_URL, FETCH_OPTIONS)\r\n        let data = ERROR.data\r\n        \r\n        if (RESPONSE.ok)\r\n        {\r\n            data = await RESPONSE.json()\r\n        }\r\n        else\r\n        {\r\n            console.error(ERROR.fetchMessages.fetchUnsuccessful)\r\n        }\r\n\r\n        return {\r\n            statusCode: RESPONSE.status,\r\n            body: JSON.stringify(data)\r\n        }\r\n    } \r\n    catch (error) \r\n    {\r\n        console.error(`${ERROR.fetchMessages.fetchNotExecuted}: `, error)\r\n\r\n        return {\r\n            statusCode: ERROR.proxyStatus,\r\n            body: JSON.stringify({ error: ERROR.fetchMessages.fetchNotExecuted, message: error?.message || ERROR.emptyMessage }),\r\n        }\r\n    }\r\n}\r\n\r\nexport { handler }"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAM,UAAU,OAAO,UACvB;AACI,QAAM,EAAE,MAAM,MAAM,UAAU,WAAW,YAAY,aAAa,SAAS,SAAS,MAAM,KAAK,IAAI;AACnG,QAAM,cAAc,KAAK,QAAQ,6BAA6B,EAAE,EAAE,QAAQ,QAAQ,EAAE;AACpF,QAAM,aAAa,2CAA2C,WAAW,IAAI,aAAa,EAAE;AAC5F,QAAM,QAAQ;AAAA,IACV,eAAe;AAAA,MACX,mBAAmB;AAAA,MACnB,kBAAkB;AAAA,IACtB;AAAA,IACA,MAAM;AAAA,IACN,cAAc;AAAA,IACd,aAAa;AAAA,EACjB;AAEA,MACA;AACI,UAAM,gBAAgB;AAAA,MAClB,QAAQ;AAAA,MACR,SAAS,EAAE,GAAG,QAAQ;AAAA,MACtB,MAAM,gBAAgB,QAAQ,OAAO;AAAA,IACzC;AACA,UAAM,WAAW,MAAM,MAAM,YAAY,aAAa;AACtD,QAAI,OAAO,MAAM;AAEjB,QAAI,SAAS,IACb;AACI,aAAO,MAAM,SAAS,KAAK;AAAA,IAC/B,OAEA;AACI,cAAQ,MAAM,MAAM,cAAc,iBAAiB;AAAA,IACvD;AAEA,WAAO;AAAA,MACH,YAAY,SAAS;AAAA,MACrB,MAAM,KAAK,UAAU,IAAI;AAAA,IAC7B;AAAA,EACJ,SACO,OACP;AACI,YAAQ,MAAM,GAAG,MAAM,cAAc,gBAAgB,MAAM,KAAK;AAEhE,WAAO;AAAA,MACH,YAAY,MAAM;AAAA,MAClB,MAAM,KAAK,UAAU,EAAE,OAAO,MAAM,cAAc,kBAAkB,SAAS,OAAO,WAAW,MAAM,aAAa,CAAC;AAAA,IACvH;AAAA,EACJ;AACJ;",
  "names": []
}
